<?xml version="1.0" encoding="UTF-8" ?>
<extentreports>
	<configuration>
		<!-- report theme -->
		<!-- standard, dark -->
		<theme>dark</theme>

		<!-- document encoding -->
		<!-- defaults to UTF-8 -->
		<encoding>UTF-8</encoding>

		<!-- protocol for script and stylesheets -->
		<!-- defaults to https -->
		<protocol>https</protocol>

		<!-- title of the document -->
		<documentTitle>My Report</documentTitle>

		<!-- report name - displayed at top-nav -->
		<reportName>My report</reportName>

		<!-- location of charts in the test view -->
		<!-- top, bottom -->
		<testViewChartLocation>top</testViewChartLocation>

		<!-- settings to enable/disable views -->
		<!-- professional version only -->
		<enableCategoryView>true</enableCategoryView>
		<enableAuthorView>true</enableAuthorView>
		<enableExceptionView>true</enableExceptionView>
		<enableTestRunnerLogsView>true</enableTestRunnerLogsView>
		<scripts>
                
        <![CDATA[
            var passTest = 0;
			var failTest = 0;
			var TcPassPercent = 0;
			var categoryTestCaseArray = [];
			var categoryPassPercentageArray = [];
			
			function setCardHeight() {
				var environmentTable = $("div.card-panel.dashboard-environment:contains('Environment')");
				var categoryTable = $("div.card-panel.dashboard-categories:contains('Categories')");
				if(environmentTable.is(':visible')){
					var environmentTableHeight = environmentTable.height();
					var categoryTableHeight = categoryTable.height();
					if(environmentTableHeight > categoryTableHeight){
						categoryTable.height(environmentTableHeight);
					}
				}
			}
			window.setInterval(setCardHeight, 100);
			
            $(document).ready(function() {
				var testCasePercentChart = "<div class='col s12 m6 l6 np-h'><div class='card-panel nm-v'><div class='left panel-name'>Pass Percentage</div><div class='chart-box'><svg id='TcPassPercentChart' width='100' height='80' style='width: 100px; height: 80px;'></svg></div></div></div>";
				$('div#charts-row').append(testCasePercentChart);
				TcPassPercent = Math.round((statusGroup.passParent * 100) / (statusGroup.passParent + statusGroup.failParent + statusGroup.skipParent + statusGroup.warningParent + statusGroup.errorParent + statusGroup.fatalParent));
			});
				
			$(document).ready(function() {
				$('head').append("<link rel='shortcut icon' href='http://extentreports.com/wp-content/uploads/2018/09/Extent_logomark_transparentbg.png' type='image/x-icon'/>");
				$('a.blue').removeClass('blue');			
				$('a.brand-logo').html("<img class='brand-logo' src='http://extentreports.com/wp-content/uploads/2018/09/Extent_logomark_transparentbg.png' align='middle' width='20px' height='30px' />");
				$("div.card-panel.nm-v:contains('Steps')").hide();

				$("div.dashboard-environment").parent().attr('class', 'col s6')
				$('div.row').not('#charts-row').append("<div class='col s6'><div class='card-panel dashboard-categories' style='height: 600px;'><span class='right label cyan white-text'>Test case distribution by Category</span><div id='testCaseByCategory' style='width:100%;height:100%;'></div><p>&nbsp;</p></div></div>");
				$('div.row').not('#charts-row').append("<div class='col s6'><div class='card-panel dashboard-categories' style='height: 600px;'><span class='right label cyan white-text'>Test pass percentage by Category</span><div id='passPercentageByCategory' style='width:100%;height:100%;'><p>&nbsp;</p></div></div>");
				
				var categoryTable = $('div.dashboard-categories').find('table')[0];
				var categories = categoryTable.getElementsByTagName("tr");
				Array.from(categories).forEach(category => {
					var values = category.getElementsByTagName("td");
					if(values.length > 0){
						var categoryName = values[0].innerText;
						if(categoryName != 'regression'){
							var passtests = parseInt(values[1].innerText);
							var failtests = parseInt(values[2].innerText);
							var othertests = parseInt(values[3].innerText);
							var categoryTestCaseData = {category: categoryName, value1: passtests, value2: failtests, value3: othertests};
							categoryTestCaseArray.push(categoryTestCaseData);
							var passPercentage = parseInt(values[4].innerText.replace('%',''));
							var categoryPassPercentData = {category: categoryName, value: passPercentage, full: 100}
							categoryPassPercentageArray.push(categoryPassPercentData);
						}
					}
				})
			});

        $(document).ready(function() {
			var config0 = liquidFillGaugeDefaultSettings();
			config0.waveColor = '#00af00';
			config0.textColor = '#00af00';
		    config0.waveAnimateTime = 2500;
		    config0.waveHeight = 0.1;
			var gauge1 = loadLiquidFillGauge("TcPassPercentChart", TcPassPercent, config0);
		});
	
	
		function liquidFillGaugeDefaultSettings(){
		    return {
		        minValue: 0, // The gauge minimum value.
		        maxValue: 100, // The gauge maximum value.
		        circleThickness: 0.05, // The outer circle thickness as a percentage of it's radius.
		        circleFillGap: 0.05, // The size of the gap between the outer circle and wave circle as a percentage of the outer circles radius.
		        circleColor: "#178BCA", // The color of the outer circle.
		        waveHeight: 0.05, // The wave height as a percentage of the radius of the wave circle.
		        waveCount: 1, // The number of full waves per width of the wave circle.
		        waveRiseTime: 1000, // The amount of time in milliseconds for the wave to rise from 0 to it's final height.
		        waveAnimateTime: 18000, // The amount of time in milliseconds for a full wave to enter the wave circle.
		        waveRise: true, // Control if the wave should rise from 0 to it's full height, or start at it's full height.
		        waveHeightScaling: true, // Controls wave size scaling at low and high fill percentages. When true, wave height reaches it's maximum at 50% fill, and minimum at 0% and 100% fill. This helps to prevent the wave from making the wave circle from appear totally full or empty when near it's minimum or maximum fill.
		        waveAnimate: true, // Controls if the wave scrolls or is static.
		        waveColor: "#178BCA", // The color of the fill wave.
		        waveOffset: 0, // The amount to initially offset the wave. 0 = no offset. 1 = offset of one full wave.
		        textVertPosition: .5, // The height at which to display the percentage text withing the wave circle. 0 = bottom, 1 = top.
		        textSize: 1, // The relative height of the text to display in the wave circle. 1 = 50%
		        valueCountUp: true, // If true, the displayed value counts up from 0 to it's final value upon loading. If false, the final value is displayed.
		        displayPercent: true, // If true, a % symbol is displayed after the value.
		        textColor: "#045681", // The color of the value text when the wave does not overlap it.
		        waveTextColor: "#A4DBf8" // The color of the value text when the wave overlaps it.
			};
		}

		function loadLiquidFillGauge(elementId, value, config) {
		    if(config == null) config = liquidFillGaugeDefaultSettings();
		
		    var gauge = d3.select("#" + elementId);
		    var radius = Math.min(parseInt(gauge.style("width")), parseInt(gauge.style("height")))/2;
		    var locationX = parseInt(gauge.style("width"))/2 - radius;
		    var locationY = parseInt(gauge.style("height"))/2 - radius;
		    var fillPercent = Math.max(config.minValue, Math.min(config.maxValue, value))/config.maxValue;
		
		    var waveHeightScale;
		    if(config.waveHeightScaling){
		        waveHeightScale = d3.scale.linear()
		            .range([0,config.waveHeight,0])
		            .domain([0,50,100]);
		    } else {
		        waveHeightScale = d3.scale.linear()
		            .range([config.waveHeight,config.waveHeight])
		            .domain([0,100]);
		    }
		
		    var textPixels = (config.textSize*radius/2);
		    var textFinalValue = parseFloat(value).toFixed(2);
		    var textStartValue = config.valueCountUp?config.minValue:textFinalValue;
		    var percentText = config.displayPercent?"%":"";
		    var circleThickness = config.circleThickness * radius;
		    var circleFillGap = config.circleFillGap * radius;
		    var fillCircleMargin = circleThickness + circleFillGap;
		    var fillCircleRadius = radius - fillCircleMargin;
		    var waveHeight = fillCircleRadius*waveHeightScale(fillPercent*100);
		
		    var waveLength = fillCircleRadius*2/config.waveCount;
		    var waveClipCount = 1+config.waveCount;
		    var waveClipWidth = waveLength*waveClipCount;
		
		    // Rounding functions so that the correct number of decimal places is always displayed as the value counts up.
		    var textRounder = function(value){ return Math.round(value); };
		    if(parseFloat(textFinalValue) != parseFloat(textRounder(textFinalValue))){
		        textRounder = function(value){ return parseFloat(value).toFixed(1); };
		    }
		    if(parseFloat(textFinalValue) != parseFloat(textRounder(textFinalValue))){
		        textRounder = function(value){ return parseFloat(value).toFixed(2); };
		    }
		
		    // Data for building the clip wave area.
		    var data = [];
		    for(var i = 0; i <= 40*waveClipCount; i++){
		        data.push({x: i/(40*waveClipCount), y: (i/(40))});
		    }
		
		    // Scales for drawing the outer circle.
		    var gaugeCircleX = d3.scale.linear().range([0,2*Math.PI]).domain([0,1]);
		    var gaugeCircleY = d3.scale.linear().range([0,radius]).domain([0,radius]);
		
		    // Scales for controlling the size of the clipping path.
		    var waveScaleX = d3.scale.linear().range([0,waveClipWidth]).domain([0,1]);
		    var waveScaleY = d3.scale.linear().range([0,waveHeight]).domain([0,1]);
		
		    // Scales for controlling the position of the clipping path.
		    var waveRiseScale = d3.scale.linear()
		        // The clipping area size is the height of the fill circle + the wave height, so we position the clip wave
		        // such that the it will overlap the fill circle at all when at 0%, and will totally cover the fill
		        // circle at 100%.
		        .range([(fillCircleMargin+fillCircleRadius*2+waveHeight),(fillCircleMargin-waveHeight)])
		        .domain([0,1]);
		    var waveAnimateScale = d3.scale.linear()
		        .range([0, waveClipWidth-fillCircleRadius*2]) // Push the clip area one full wave then snap back.
		        .domain([0,1]);
		
		    // Scale for controlling the position of the text within the gauge.
		    var textRiseScaleY = d3.scale.linear()
		        .range([fillCircleMargin+fillCircleRadius*2,(fillCircleMargin+textPixels*0.7)])
		        .domain([0,1]);
		
		    // Center the gauge within the parent SVG.
		    var gaugeGroup = gauge.append("g")
		        .attr('transform','translate('+locationX+','+locationY+')');
		
		    // Draw the outer circle.
		    var gaugeCircleArc = d3.svg.arc()
		        .startAngle(gaugeCircleX(0))
		        .endAngle(gaugeCircleX(1))
		        .outerRadius(gaugeCircleY(radius))
		        .innerRadius(gaugeCircleY(radius-circleThickness));
		    gaugeGroup.append("path")
		        .attr("d", gaugeCircleArc)
		        .style("fill", config.circleColor)
		        .attr('transform','translate('+radius+','+radius+')');
		
		    // Text where the wave does not overlap.
		    var text1 = gaugeGroup.append("text")
		        .text(textRounder(textStartValue) + percentText)
		        .attr("class", "liquidFillGaugeText")
		        .attr("text-anchor", "middle")
		        .attr("font-size", textPixels + "px")
		        .style("fill", config.textColor)
		        .attr('transform','translate('+radius+','+textRiseScaleY(config.textVertPosition)+')');
		
		    // The clipping wave area.
		    var clipArea = d3.svg.area()
		        .x(function(d) { return waveScaleX(d.x); } )
		        .y0(function(d) { return waveScaleY(Math.sin(Math.PI*2*config.waveOffset*-1 + Math.PI*2*(1-config.waveCount) + d.y*2*Math.PI));} )
		        .y1(function(d) { return (fillCircleRadius*2 + waveHeight); } );
		    var waveGroup = gaugeGroup.append("defs")
		        .append("clipPath")
		        .attr("id", "clipWave" + elementId);
		    var wave = waveGroup.append("path")
		        .datum(data)
		        .attr("d", clipArea)
		        .attr("T", 0);
		
		    // The inner circle with the clipping wave attached.
		    var fillCircleGroup = gaugeGroup.append("g")
		        .attr("clip-path", "url(#clipWave" + elementId + ")");
		    fillCircleGroup.append("circle")
		        .attr("cx", radius)
		        .attr("cy", radius)
		        .attr("r", fillCircleRadius)
		        .style("fill", config.waveColor);
		
		    // Text where the wave does overlap.
		    var text2 = fillCircleGroup.append("text")
		        .text(textRounder(textStartValue) + percentText)
		        .attr("class", "liquidFillGaugeText")
		        .attr("text-anchor", "middle")
		        .attr("font-size", textPixels + "px")
		        .style("fill", config.waveTextColor)
		        .attr('transform','translate('+radius+','+textRiseScaleY(config.textVertPosition)+')');
		
		    // Make the value count up.
		    if(config.valueCountUp){
		        var textTween = function(){
		            var i = d3.interpolate(this.textContent, textFinalValue);
		            return function(t) { this.textContent = textRounder(i(t)) + percentText; }
		        };
		        text1.transition()
		            .duration(config.waveRiseTime)
		            .tween("text", textTween);
		        text2.transition()
		            .duration(config.waveRiseTime)
		            .tween("text", textTween);
		    }
		
		    // Make the wave rise. wave and waveGroup are separate so that horizontal and vertical movement can be controlled independently.
		    var waveGroupXPosition = fillCircleMargin+fillCircleRadius*2-waveClipWidth;
		    if(config.waveRise){
		        waveGroup.attr('transform','translate('+waveGroupXPosition+','+waveRiseScale(0)+')')
		            .transition()
		            .duration(config.waveRiseTime)
		            .attr('transform','translate('+waveGroupXPosition+','+waveRiseScale(fillPercent)+')')
		            .each("start", function(){ wave.attr('transform','translate(1,0)'); }); // This transform is necessary to get the clip wave positioned correctly when waveRise=true and waveAnimate=false. The wave will not position correctly without this, but it's not clear why this is actually necessary.
		    } else {
		        waveGroup.attr('transform','translate('+waveGroupXPosition+','+waveRiseScale(fillPercent)+')');
		    }
		
		    if(config.waveAnimate) animateWave();
		
		    function animateWave() {
		        wave.attr('transform','translate('+waveAnimateScale(wave.attr('T'))+',0)');
		        wave.transition()
		            .duration(config.waveAnimateTime * (1-wave.attr('T')))
		            .ease('linear')
		            .attr('transform','translate('+waveAnimateScale(1)+',0)')
		            .attr('T', 1)
		            .each('end', function(){
		                wave.attr('T', 0);
		                animateWave(config.waveAnimateTime);
		            });
		    }
		
		    function GaugeUpdater(){
		        this.update = function(value){
		            var newFinalValue = parseFloat(value).toFixed(2);
		            var textRounderUpdater = function(value){ return Math.round(value); };
		            if(parseFloat(newFinalValue) != parseFloat(textRounderUpdater(newFinalValue))){
		                textRounderUpdater = function(value){ return parseFloat(value).toFixed(1); };
		            }
		            if(parseFloat(newFinalValue) != parseFloat(textRounderUpdater(newFinalValue))){
		                textRounderUpdater = function(value){ return parseFloat(value).toFixed(2); };
		            }
		
		            var textTween = function(){
		                var i = d3.interpolate(this.textContent, parseFloat(value).toFixed(2));
		                return function(t) { this.textContent = textRounderUpdater(i(t)) + percentText; }
		            };
		
		            text1.transition()
		                .duration(config.waveRiseTime)
		                .tween("text", textTween);
		            text2.transition()
		                .duration(config.waveRiseTime)
		                .tween("text", textTween);
		
		            var fillPercent = Math.max(config.minValue, Math.min(config.maxValue, value))/config.maxValue;
		            var waveHeight = fillCircleRadius*waveHeightScale(fillPercent*100);
		            var waveRiseScale = d3.scale.linear()
		                // The clipping area size is the height of the fill circle + the wave height, so we position the clip wave
		                // such that the it will overlap the fill circle at all when at 0%, and will totally cover the fill
		                // circle at 100%.
		                .range([(fillCircleMargin+fillCircleRadius*2+waveHeight),(fillCircleMargin-waveHeight)])
		                .domain([0,1]);
		            var newHeight = waveRiseScale(fillPercent);
		            var waveScaleX = d3.scale.linear().range([0,waveClipWidth]).domain([0,1]);
		            var waveScaleY = d3.scale.linear().range([0,waveHeight]).domain([0,1]);
		            var newClipArea;
		            if(config.waveHeightScaling){
		                newClipArea = d3.svg.area()
		                    .x(function(d) { return waveScaleX(d.x); } )
		                    .y0(function(d) { return waveScaleY(Math.sin(Math.PI*2*config.waveOffset*-1 + Math.PI*2*(1-config.waveCount) + d.y*2*Math.PI));} )
		                    .y1(function(d) { return (fillCircleRadius*2 + waveHeight); } );
		            } else {
		                newClipArea = clipArea;
		            }
		
		            var newWavePosition = config.waveAnimate?waveAnimateScale(1):0;
		            wave.transition()
		                .duration(0)
		                .transition()
		                .duration(config.waveAnimate?(config.waveAnimateTime * (1-wave.attr('T'))):(config.waveRiseTime))
		                .ease('linear')
		                .attr('d', newClipArea)
		                .attr('transform','translate('+newWavePosition+',0)')
		                .attr('T','1')
		                .each("end", function(){
		                    if(config.waveAnimate){
		                        wave.attr('transform','translate('+waveAnimateScale(0)+',0)');
		                        animateWave(config.waveAnimateTime);
		                    }
		                });
		            waveGroup.transition()
		                .duration(config.waveRiseTime)
		                .attr('transform','translate('+waveGroupXPosition+','+newHeight+')')
		        }
		    }
		
		    return new GaugeUpdater();
		}

		// Category charts
		
		$(document)
		.ready(
				function() {
					am4core
							.ready(function() {

								// Themes begin
								am4core.useTheme(am4themes_animated);
								// Themes end

								// Create chart instance
								var chart = am4core.create(
										"passPercentageByCategory",
										am4charts.RadarChart);

								// Add data
								chart.data = categoryPassPercentageArray;
								// Make chart not full circle
								chart.startAngle = -90;
								chart.endAngle = 180;
								chart.innerRadius = am4core.percent(20);

								// Set number format
								chart.numberFormatter.numberFormat = "#.#'%'";

								// Create axes
								var categoryAxis = chart.yAxes
										.push(new am4charts.CategoryAxis());
								categoryAxis.dataFields.category = "category";
								categoryAxis.renderer.grid.template.location = 0;
								categoryAxis.renderer.grid.template.strokeOpacity = 0;
								categoryAxis.renderer.labels.template.horizontalCenter = "right";
								categoryAxis.renderer.labels.template.fontWeight = 500;
								categoryAxis.renderer.labels.template.adapter
										.add(
												"fill",
												function(fill, target) {
													return (target.dataItem.index >= 0) ? chart.colors
															.getIndex(target.dataItem.index)
															: fill;
												});
								categoryAxis.renderer.minGridDistance = 10;

								var valueAxis = chart.xAxes
										.push(new am4charts.ValueAxis());
								valueAxis.renderer.grid.template.strokeOpacity = 0;
								valueAxis.renderer.labels.template.fill = am4core
										.color($("body").css("color"));
								valueAxis.min = 0;
								valueAxis.max = 100;
								valueAxis.strictMinMax = true;

								// Create series
								var series1 = chart.series
										.push(new am4charts.RadarColumnSeries());
								series1.dataFields.valueX = "full";
								series1.dataFields.categoryY = "category";
								series1.clustered = false;
								series1.columns.template.fill = new am4core.InterfaceColorSet()
										.getFor("alternativeBackground");
								series1.columns.template.fillOpacity = 0.08;
								series1.columns.template.cornerRadiusTopLeft = 20;
								series1.columns.template.strokeWidth = 0;
								series1.columns.template.radarColumn.cornerRadius = 20;

								var series2 = chart.series
										.push(new am4charts.RadarColumnSeries());
								series2.dataFields.valueX = "value";
								series2.dataFields.categoryY = "category";
								series2.clustered = false;
								series2.columns.template.strokeWidth = 0;
								series2.columns.template.tooltipText = "{category}: [bold]{value}[/]";
								series2.columns.template.radarColumn.cornerRadius = 20;

								series2.columns.template.adapter
										.add(
												"fill",
												function(fill, target) {
													return chart.colors
															.getIndex(target.dataItem.index);
												});

								// Add cursor
								chart.cursor = new am4charts.RadarCursor();

							});
				}); // end am4core.ready()

$(document)
		.ready(
				function() {
					am4core
							.ready(function() {

								// Themes begin
								am4core.useTheme(am4themes_animated);
								// Themes end

								var chart = am4core.create(
										"testCaseByCategory",
										am4charts.RadarChart);
								chart.hiddenState.properties.opacity = 0; // this creates initial fade-in

								// chart.data = categoryDataArray;
								chart.data = categoryTestCaseArray;
								chart.startAngle = -90;
								chart.endAngle = 190;

								// chart.padding(20, 20, 20, 20);
								chart.colors.step = 3;

								var categoryAxis = chart.yAxes
										.push(new am4charts.CategoryAxis());
								categoryAxis.dataFields.category = "category";
								categoryAxis.renderer.labels.template.location = 0.5;
								categoryAxis.renderer.labels.template.horizontalCenter = "right";
								categoryAxis.renderer.labels.template.fill = am4core
										.color($("body").css("color"));
								categoryAxis.renderer.grid.template.location = 0;
								categoryAxis.renderer.tooltipLocation = 0.5;
								categoryAxis.renderer.grid.template.strokeOpacity = 0.07;
								categoryAxis.renderer.axisFills.template.disabled = true;
								categoryAxis.interactionsEnabled = false;
								categoryAxis.renderer.minGridDistance = 10;

								var valueAxis = chart.xAxes
										.push(new am4charts.ValueAxis());
								valueAxis.tooltip.disabled = true;
								valueAxis.renderer.labels.template.horizontalCenter = "left";
								valueAxis.renderer.labels.template.fill = am4core
										.color($("body").css("color"));
								valueAxis.renderer.maxLabelPosition = 0.99;
								valueAxis.renderer.minGridDistance = 10;
								valueAxis.renderer.grid.template.strokeOpacity = 0.07;
								valueAxis.renderer.axisFills.template.disabled = true;
								valueAxis.interactionsEnabled = false;

								var series1 = chart.series
										.push(new am4charts.RadarColumnSeries());
								series1.columns.template.tooltipText = "{name}: {valueX.value}";
								series1.columns.template.fill = am4core.color(
										"green").lighten(0.5);
								series1.columns.template.stroke = am4core
										.color("green").lighten(0.5);
								series1.name = "Pass";
								series1.dataFields.categoryY = "category";
								series1.dataFields.valueX = "value1";
								series1.stacked = true;

								var series2 = chart.series
										.push(new am4charts.RadarColumnSeries());
								series2.columns.template.tooltipText = "{name}: {valueX.value}";
								series2.columns.template.fill = am4core.color(
										"red").lighten(0.5);
								series2.columns.template.stroke = am4core
										.color("red").lighten(0.5);
								series2.name = "Fail";
								series2.dataFields.categoryY = "category";
								series2.dataFields.valueX = "value2";
								series2.stacked = true;

								var series3 = chart.series
										.push(new am4charts.RadarColumnSeries());
								series3.columns.template.tooltipText = "{name}: {valueX.value}";
								series3.columns.template.fill = am4core.color(
										"yellow").lighten(0.5);
								series3.columns.template.stroke = am4core
										.color("yellow").lighten(0.5);
								series3.name = "Skip";
								series3.dataFields.categoryY = "category";
								series3.dataFields.valueX = "value3";
								series3.stacked = true;

								chart.seriesContainer.zIndex = -1;

								chart.cursor = new am4charts.RadarCursor();
								chart.cursor.lineY.disabled = true;

							});
				}); // end am4core.ready()
        ]]>

		</scripts>
		<styles>
            <![CDATA[
                .liquidFillGaugeText { font-family: Helvetica; font-weight: bold; }
                img.brand-logo {display: block; margin-top: 0px !important; padding-left: 0px !important}
            ]]>
		</styles>
	</configuration>
</extentreports>